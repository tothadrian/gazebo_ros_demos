<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rrbot_gazebo)/worlds/rrbot.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find rrbot_description)/urdf/myrobot.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model rrbot -param robot_description"/>

  <!--start RVIZ-->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find rrbot_gazebo)/rviz/config_file.rviz" />
  
  <!-- convert joint states to TF transforms for rviz-->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
	  respawn="false" output="screen">
    <remap from="/joint_states" to="/rrbot/joint_states" />
  </node>

 <!--node for creating a tf2 frame moving together with the conveyor belt-->
 <node pkg="rrbot_gazebo" type="conveyor_tf2_broadcast"
          name="create_conveyor_frame" >
    <param name="frame_name" type="string" value="conveyor_reference" />
    <param name="velocity" type="double" value="0.02" /> <!--velocity of the objects has to be set in the model_push.cpp file-->
  </node>

  <!--median filtering and removing points of conveyor belt-->        
  <node pkg="laser_filters" type="scan_to_scan_filter_chain"
      name="laser_filter" output="screen">
    <rosparam command="load" file="$(find rrbot_gazebo)/my_laser_filter.yaml" />
    <remap from="scan" to="rrbot/laser/scan" />      
  </node>

  <!--assembles scans in a rolling buffer without publishing it-->
  <node type="laser_scan_assembler" pkg="laser_assembler"
        name="my_assembler">
    <remap from="scan" to="scan_filtered"/>
    <param name="max_scans" type="int" value="4000" />
    <param name="fixed_frame" type="string" value="conveyor_reference" />
  </node>

  <!--this node calls the assemble_scans2 service after every "duration" and publishes a sensor_msgs/pointcloud2 to assembled_cloud-->
  <node pkg="rrbot_gazebo" type="periodic_snapshotter"
          name="periodic_snapshotter" >
    <param name="duration" type="double" value="0.1" />
  </node>

  <!--converts a sensor_msgs/poinctcloud2 to pcl::PCLPointCloud2 and filters it-->
  <node pkg="rrbot_gazebo" type="pcl_filter"
          name="pcl_filter"
          output="screen" >
    <param name="frequency" type="int" value="10" />
    <param name="source_frame" type="string" value="hokuyo_link" />
    <param name="target_frame" type="string" value="conveyor_reference" />
    <param name="max_dist" type="double" value="2.0" />
  </node>    

   <!--projects the points in the pointcloud to the image frame and colors them accordingly-->
   <node pkg="rrbot_gazebo" type="color_pc"
          name="color_pc"
          output="screen" >
    <param name="source_frame" type="string" value="conveyor_reference" />
    <param name="target_frame" type="string" value="camera_link_optical"/>
    <param name="camera_topic" type="string" value="rrbot/camera1"/>
  </node>   
   

  <!-- ros_control rrbot launch file -->
  <!--include file="$(find rrbot_control)/launch/rrbot_control.launch" /-->

</launch>
